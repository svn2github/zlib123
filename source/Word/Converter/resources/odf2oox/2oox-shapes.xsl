<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2006, Clever Age
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *  
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Clever Age nor the names of its contributors 
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
  xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
  xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing"
  xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
  xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
  xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
  xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
  xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
  xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"
  xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
  xmlns:w10="urn:schemas-microsoft-com:office:word"
  exclude-result-prefixes="xlink draw svg fo office style text">
  
  <!--
  *************************************************************************
  SUMMARY
  *************************************************************************
  This stylesheet handles the conversion of shapes. For example shapes are 
  rectangles, ellipses, lines or custom-shapes.
  *************************************************************************
  -->
  
  <!-- 
  *************************************************************************
  MATCHING TEMPLATES
  *************************************************************************
  -->

  <!-- 
  Summary:  Forward shapes in paragraph mode to shapes mode 
  Author:   Clever Age
  -->
  <xsl:template match="draw:custom-shape |draw:rect |draw:ellipse" mode="paragraph">
      <!-- COMMENT : many other shapes to be handled by 1.1 -->
      <xsl:choose>
        <xsl:when test="ancestor::draw:text-box">
          <xsl:message terminate="no">translation.odf2oox.nestedFrames</xsl:message>
        </xsl:when>
        
        <xsl:otherwise>
          <xsl:apply-templates select="." mode="shapes"/>
        </xsl:otherwise>
      </xsl:choose>
  </xsl:template>

  
  <!-- 
  Summary:  Converts a cutom shape
  Author:   Clever Age
  -->
  <xsl:template match="draw:custom-shape" mode="shapes">
    <xsl:variable name="styleName" select=" @draw:style-name"/>
    <xsl:variable name="automaticStyle" select="key('automatic-styles', $styleName)"/>
    <xsl:variable name="officeStyle" select="document('styles.xml')/office:document-styles/office:styles/style:style[@style:name = $styleName]"/>

    <w:r>
      <w:pict>

        <!--
        makz:
        !!! Detecting a custom shape on their draw:type attribute is no clean solution !!!
        !!! It will only work for ODT files generated by OpenOffice !!!
        !!! This needs to be changed in future !!!
        -->
        <xsl:choose>
          <xsl:when test="draw:enhanced-geometry/@draw:type = 'rectangle' ">

            <xsl:call-template name="InsertRect">
              <xsl:with-param name="shapeStyle" select="$automaticStyle | $officeStyle"/>
              <xsl:with-param name="shape" select="."/>
            </xsl:call-template>

          </xsl:when>
          <xsl:when test="draw:enhanced-geometry/@draw:type = 'ellipse' ">

            <xsl:call-template name="InsertOval">
              <xsl:with-param name="shapeStyle" select="$automaticStyle | $officeStyle"/>
              <xsl:with-param name="shape" select="."/>
            </xsl:call-template>

          </xsl:when>
          <xsl:when test="draw:enhanced-geometry/@draw:type = 'round-rectangle' ">

            <xsl:call-template name="InsertRoundedRect">
              <xsl:with-param name="shapeStyle" select="$automaticStyle | $officeStyle"/>
              <xsl:with-param name="shape" select="."/>
            </xsl:call-template>

          </xsl:when>
        </xsl:choose>
        
      </w:pict>
    </w:r>
  </xsl:template>

  
  <!-- 
  Summary:  Converts draw:rect to VML rectangle
  Modified: makz (DIaLOGIKa)
  -->
  <xsl:template match="draw:rect" mode="shapes">
    <xsl:variable name="styleName" select=" @draw:style-name"/>
    <xsl:variable name="automaticStyle" select="key('automatic-styles', $styleName)"/>
    <xsl:variable name="officeStyle" select="document('styles.xml')/office:document-styles/office:styles/style:style[@style:name = $styleName]"/>

    <w:r>
      <w:pict>
        <xsl:call-template name="InsertRect">
          <xsl:with-param name="shapeStyle" select="$automaticStyle | $officeStyle"/>
          <xsl:with-param name="shape" select="."/>
        </xsl:call-template>
      </w:pict>
    </w:r>
  </xsl:template>

  
  <!--
  Summary:  Converts draw:ellipse to VML oval
  Author:   makz (DIaLOGIKa)
  -->
  <xsl:template match="draw:ellipse" mode="shapes">
    <xsl:variable name="styleName" select=" @draw:style-name"/>
    <xsl:variable name="automaticStyle" select="key('automatic-styles', $styleName)"/>
    <xsl:variable name="officeStyle" select="document('styles.xml')/office:document-styles/office:styles/style:style[@style:name = $styleName]"/>

    <w:r>
      <w:pict>
        <xsl:call-template name="InsertOval">
          <xsl:with-param name="shapeStyle" select="$automaticStyle | $officeStyle"/>
          <xsl:with-param name="shape" select="."/>
        </xsl:call-template>
      </w:pict>
    </w:r>
  </xsl:template>

  
  <!-- 
  *************************************************************************
  CALLED TEMPLATES
  *************************************************************************
  -->

  
  <!--
  Summary:  Inserts a VML rectangle
  Author:   makz (DIaLOGIKa)
  Params:   shapeStyle: The automatic style of the draw:shape
            shape: The draw:shape itself
  -->
  <xsl:template name="InsertRect">
    <xsl:param name="shapeStyle"/>
    <xsl:param name="shape" />

    <v:rect>
      
      <xsl:call-template name="ConvertShapeProperties">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="shape" select="$shape"/>
      </xsl:call-template>

      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="InsertTextBox">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
      </xsl:call-template>
      
    </v:rect>
  </xsl:template>

 
  <!--
  Summary:  Inserts a VML rounded rectangle
  Author:   makz (DIaLOGIKa)
  Params:   shapeStyle: The automatic style of the draw:shape
            shape: The draw:shape itself
  -->
  <xsl:template name="InsertRoundedRect">
    <xsl:param name="shapeStyle"/>
    <xsl:param name="shape" />

    <v:roundrect>

      <xsl:call-template name="ConvertShapeProperties">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="shape" select="$shape"/>
      </xsl:call-template>

      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="InsertTextBox">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
      </xsl:call-template>

    </v:roundrect>
  </xsl:template>
  
  
  <!--
  Summary:  Inserts a VML oval
  Author:   makz (DIaLOGIKa)
  Params:   shapeStyle: The automatic style of the draw:shape
            shape: The draw:shape itself
  -->
  <xsl:template name="InsertOval">
    <xsl:param name="shapeStyle"/>
    <xsl:param name="shape" />
    
    <v:oval>
      
      <xsl:call-template name="ConvertShapeProperties">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="shape" select="$shape"/>
      </xsl:call-template>

      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="InsertTextBox">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
      </xsl:call-template>
      
    </v:oval>
  </xsl:template>


  <!-- 
  Summary:  Converts the properties of a draw:rect/draw:oval (e.g.) to VML properties
  Author:   CleverAge
  Params:   shapeStyle: The automatic style of the draw:shape
            shape: The draw:shape itself
  -->
  <xsl:template name="ConvertShapeProperties">
    <xsl:param name="shapeStyle"/>
    <xsl:param name="shape"/>

    <xsl:if test="$shapeStyle != 0 or count($shapeStyle) &gt; 1">

      <xsl:call-template name="InsertShapeStyleAttribute">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="shape" select="$shape"/>
      </xsl:call-template>

      <xsl:call-template name="InsertShapeStroke">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
      </xsl:call-template>

      <xsl:call-template name="InsertShapeFill">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
      </xsl:call-template>
    
    </xsl:if>
  </xsl:template>


  <!-- 
  Summary:  Inserts the style attribute of a VML shape
  Author:   CleverAge
  Params:   shapeStyle: The automatic style of the draw:shape
            shape: The draw:shape itself
  -->
  <xsl:template name="InsertShapeStyleAttribute">
    <xsl:param name="shapeStyle"/>
    <xsl:param name="shape"/>

    <xsl:attribute name="style">

      <!-- width: -->
      <xsl:variable name="frameW">
        <xsl:call-template name="point-measure">
          <xsl:with-param name="length" select="@svg:width|@fo:min-width"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:value-of select="concat('width:',$frameW,'pt;')"/>

      <!-- height: -->
      <xsl:variable name="frameH">
        <xsl:call-template name="point-measure">
          <xsl:with-param name="length" select="@fo:min-height|@svg:height"/>
        </xsl:call-template>
      </xsl:variable>
      <xsl:value-of select="concat('height:',$frameH,'pt;')"/>

      <!-- z-index: -->
      <xsl:choose>
        <xsl:when test="@draw:z-index=0">
          <xsl:value-of select="concat('z-index:',2516572155-@draw:z-index,';')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="concat('z-index:',251659264+@draw:z-index,';')"/>
        </xsl:otherwise>
      </xsl:choose>

      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="FrameToRelativeShapePosition">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
        <xsl:with-param name="frame" select="$shape"/>
      </xsl:call-template>
      
      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="FrameToShapePosition">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
        <xsl:with-param name="frame" select="$shape"/>
      </xsl:call-template>

      <!-- reuse the frame template, attributes are the same -->
      <xsl:call-template name="FrameToTextAnchor">
        <xsl:with-param name="frameStyle" select="$shapeStyle"/>
      </xsl:call-template>
    </xsl:attribute>
  </xsl:template>


  <!-- 
  Summary:  Inserts the VML shape fill
  Author:   CleverAge
  Params:   shapeStyle: The automatic style of the draw:shape
  -->
  <xsl:template name="InsertShapeFill">
    <xsl:param name="shapeStyle"/>

    <xsl:variable name="fillColor">
      <xsl:call-template name="GetDrawnGraphicProperties">
        <xsl:with-param name="attrib">draw:fill-color</xsl:with-param>
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="fillProperty">
      <xsl:call-template name="GetGraphicProperties">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="attribName">draw:fill</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="bgTransparency">
      <xsl:call-template name="GetGraphicProperties">
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        <xsl:with-param name="attribName">style:background-transparency</xsl:with-param>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="opacity">
      <xsl:variable name="draw-opacity">
        <xsl:call-template name="GetGraphicProperties">
          <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
          <xsl:with-param name="attribName">draw:opacity</xsl:with-param>
        </xsl:call-template>
      </xsl:variable>
      <xsl:choose>
        <xsl:when test="$draw-opacity != '' ">
          <xsl:value-of select="$draw-opacity"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:if test="$bgTransparency != '' ">
            <xsl:value-of
              select="concat((100 - number(substring-before($bgTransparency,'%'))), '%')"/>
          </xsl:if>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:if test="$fillColor != '' ">
      <xsl:attribute name="fillcolor">
        <xsl:value-of select="$fillColor"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:if test="$fillProperty != 'none' ">
      <v:fill>
        <xsl:if test="$opacity != '' ">
          <xsl:attribute name="opacity">
            <xsl:value-of select="$opacity"/>
          </xsl:attribute>
        </xsl:if>
        <!-- other fill properties -->
        <xsl:choose>
          <xsl:when test="$fillProperty = 'solid' ">
            <xsl:attribute name="color">
              <xsl:call-template name="GetGraphicProperties">
                <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
                <xsl:with-param name="attribName">draw:fill-color</xsl:with-param>
              </xsl:call-template>
            </xsl:attribute>
          </xsl:when>
          <xsl:when test="$fillProperty = 'gradient' ">
            <!-- simple linear gradient -->
            <xsl:variable name="gradientName">
              <xsl:call-template name="GetGraphicProperties">
                <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
                <xsl:with-param name="attribName">draw:fill-gradient-name</xsl:with-param>
              </xsl:call-template>
            </xsl:variable>
            <xsl:for-each select="document('styles.xml')/office:document-styles/office:styles/draw:gradient[@draw:name = $gradientName]">
              <!-- radial gradients not handled yet -->
              <xsl:attribute name="type">gradient</xsl:attribute>
              <xsl:if test="@draw:angle">
                <xsl:attribute name="angle">
                  <xsl:value-of select="round(number(@draw:angle) div 10)"/>
                </xsl:attribute>
              </xsl:if>
              <xsl:if test="@draw:end-color">
                <xsl:attribute name="color">
                  <xsl:value-of select="@draw:end-color"/>
                </xsl:attribute>
              </xsl:if>
              <xsl:if test="@draw:start-color">
                <xsl:attribute name="color2">
                  <xsl:value-of select="@draw:start-color"/>
                </xsl:attribute>
              </xsl:if>
            </xsl:for-each>
          </xsl:when>
        </xsl:choose>
      </v:fill>
    </xsl:if>

  </xsl:template>


  <!-- 
  Summary:  Inserts the VML stroke of a shape
  Author:   CleverAge
  Params:   shapeStyle: The automatic style of the draw:shape
  -->
  <xsl:template name="InsertShapeStroke">
    <xsl:param name="shapeStyle"/>
    
    <xsl:variable name="strokeColor">
      <xsl:call-template name="GetDrawnGraphicProperties">
        <xsl:with-param name="attrib">svg:stroke-color</xsl:with-param>
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
      </xsl:call-template>
    </xsl:variable>
    <xsl:variable name="strokeWeight">
      <xsl:call-template name="GetDrawnGraphicProperties">
        <xsl:with-param name="attrib">svg:stroke-width</xsl:with-param>
        <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
      </xsl:call-template>
    </xsl:variable>
    
    <xsl:if test="$strokeColor != '' ">
      <xsl:attribute name="strokecolor">
        <xsl:value-of select="$strokeColor"/>
      </xsl:attribute>
    </xsl:if>
    <xsl:if test="$strokeWeight != '' ">
      <xsl:attribute name="strokeweight">
        <xsl:call-template name="point-measure">
          <xsl:with-param name="length" select="$strokeWeight"/>
        </xsl:call-template>
        <xsl:text>pt</xsl:text>
      </xsl:attribute>
    </xsl:if>
  </xsl:template>

  
  <!-- 
  Summary:  Gets graphic properties for shapes 
  Author:   CleverAge
  -->
  <xsl:template name="GetDrawnGraphicProperties">
    <xsl:param name="attrib"/>
    <xsl:param name="shapeStyle"/>
    <xsl:choose>
      <xsl:when test="attribute::node()[name()=$attrib]">
        <xsl:value-of select="attribute::node()[name()=$attrib]"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="GetGraphicProperties">
          <xsl:with-param name="attribName" select="$attrib"/>
          <xsl:with-param name="shapeStyle" select="$shapeStyle"/>
        </xsl:call-template>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  
</xsl:stylesheet>
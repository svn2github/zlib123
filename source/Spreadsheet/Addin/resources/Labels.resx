<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="translation.odf2oox.HeaderFooterCharNumber" xml:space="preserve">
    <value>Excel supports only 256 chars in header/footer strings(with formatting). Any characters above 256 will be lost</value>
  </data>
  <data name="translation.odf2oox.RemovedFilter" xml:space="preserve">
    <value>Some data filters had to be removed because Excel doesn't support them</value>
  </data>
  <data name="translation.odf2oox.ScenarioNumber" xml:space="preserve">
    <value>Too many scenario cells. Excel support only 32 scenario cells</value>
  </data>
  <data name="translation.odf2oox.LineChartSmoothingBSpline" xml:space="preserve">
    <value>Excel does not support border colors for scenarios </value>
  </data>
  <data name="translation.oox2odf.RemovedFilter" xml:space="preserve">
    <value>Some data filters had to be removed because Calc doesn't support them</value>
  </data>
  <data name="translation.oox2odf.ColNumber" xml:space="preserve">
    <value>Open Office Calc supports only columns up to IV. Any columns above IV will be lost permanently</value>
  </data>
  <data name="translation.oox2odf.RowNumber" xml:space="preserve">
    <value>Open Office Calc supports only 65536 rows. Any rows above 65536 will be lost permanently</value>
  </data>
  <data name="translation.oox2odf.SheetNumber" xml:space="preserve">
    <value>Open Office Calc supports only 256 sheets. Any sheets above 256 will be lost permanently</value>
  </data>
  <data name="translation.oox2odf.OLEObject" xml:space="preserve">
    <value>Open Office Calc supports only OLEObject implemented as link to file.</value>
  </data>
  <data name="translation.oox2odf.DataConsolidation" xml:space="preserve">
    <value>Data consolidation cannot be conversed</value>
  </data>
  <data name="translation.odf2oox.DataValidCellRange" xml:space="preserve">
    <value>Excel doesn't support cell range criteria in data validation.</value>
  </data>
  <data name="translation.odf2oox.DataValidErrorMacro" xml:space="preserve">
    <value>Excel doesn't support error macro allerts in data validation.</value>
  </data>
  <data name="translation.odf2oox.QuarterDateFormat" xml:space="preserve">
    <value>Excel doesn't supports quarter date format. Date format will be changed to year.</value>
  </data>
  <data name="translation.odf2oox.SheetNameLength" xml:space="preserve">
    <value>Excel doesn't allow sheet names with more than 31 characters. Forbidden characters *\/[]:";? and characters above 31 will be lost.</value>
  </data>
  <data name="translation.oox2odf.ManualColBreakeInsideHeader" xml:space="preserve">
    <value>There is more than one manual column break inside header columns to repeat. Only one will be visible.</value>
  </data>
  <data name="translation.odf2oox.scenarioTooBig" xml:space="preserve">
   <value>One of the scenarios is too big. Excel supports only scenarios with no more than 32 changing cells.</value> 
  </data>
</root>